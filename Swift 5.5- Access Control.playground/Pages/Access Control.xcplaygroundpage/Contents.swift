//: [Previous](@previous)

import Foundation

//Access Control (접근 제어)
//접근 제어 (Access Control) 는 다른 소스 파일과 모듈에 있는 코드가 이 코드에 접근하는 것을 제약합니다. 이러한 특징은 코드의 세부 구현은 숨기면서, 해당 코드에 접근하고 사용할 수 있는 바람직한 인터페이스를 지정하도록 해줍니다.



//Modules and Source Files (모듈과 소스 파일)
//모듈 (module) 은 단일한 코드 배포 단위-단일 단위로 제작하고 출하하며 스위프트의 또 다른 모듈에서 import 키워드로 불러올 수 있는 ‘프레임웍 (framework)’ 이나 ‘응용 프로그램’-입니다.



//Access Levels (접근 수준)

//스위프트는 코드 안의 ‘개체 (entities)’ 들에 대하여 다섯 개의 서로 다른 접근 수준 (access levels) 을 제공합니다. 이 ‘접근 수준’ 들은 ‘개체’ 를 정의한 소스 파일과도 관계가 있고, 해당 소스 파일이 속한 모듈과도 관계가 있습니다.

//공개 접근 (open access) 과 공용 접근 (public access) 은 자신을 정의한 모듈의 어떤 소스 파일 안에서든, 그리고 정의한 모듈을 불러온 다른 모듈에 있는 소스 파일에서도 ‘개체’ 를 사용할 수 있게 합니다. 전형적으로 ‘공개 (open)’ 또는 ‘공용 (public) 접근’ 은 프레임웍의 공용 인터페이스를 지정할 때 사용합니다. ‘공개 (open)’ 와 ‘공용 (public) 접근’ 의 차이점은 아래에서 설명합니다.
//내부 접근 (internal access) 은 자신을 정의한 모듈의 어떤 소스 파일 안에서는 사용할 수 있지만, 해당 모듈 밖의 어떤 소스 파일에서는 ‘개체’ 를 사용할 수 없도록 합니다. 전형적으로 ‘내부 (internal) 접근’ 은 앱이나 프레임웍의 내부 구조를 정의할 때 사용합니다.
//파일-전용 접근 (file-private access) 은 ‘개체’ 의 사용을 자신을 정의한 소스 파일만으로 제약합니다. ‘파일-전용 (file-private) 접근’ 은 특정 기능을 전체 파일에서 사용하면서 해당 세부 구현을 숨겨야할 때 사용합니다.
//개인 전용 접근 (private access) 은 ‘개체’ 의 사용을, 똑같은 파일에 있는 ‘(자신을) 둘러싼 선언’ 과 해당 선언의 ‘익스텐션’ 만으로, 제약합니다. ‘개인 전용 (private) 접근’ 은 특정 기능을 단일 선언에서만 사용하면서 해당 세부 구현을 숨겨야할 때 사용합니다.



//Guiding Principle of Access Levels (접근 수준에 대한 지침)

//‘공용 (public) 변수’ 는 ‘내부 (internal)’, ‘파일-전용 (file-private)’, 또는 ‘개인 전용 (private) 타입’ 을 가지도록 정의할 수 없는데, ‘공용 변수’ 를 사용하는 모든 곳에서 타입이 사용 가능한 것은 아닐 수도 있기 때문입니다.
//‘함수’ 는 자신의 매개 변수 타입 및 반환 타입 보다 더 높은 접근 수준을 가질 수 없는데, 주위 코드에서 자신의 구성 요소 타입을 사용할 수 없는 곳에서 함수를 사용하게 될 수 있기 때문입니다.



//Default Access Levels (기본 접근 수준)

//코드의 모든 ‘개체’ 들은 직접 명시적인 ‘접근 수준’ 을 지정하지 않을 경우 ‘내부 (internal)’ 라는 ‘기본 접근 수준’ 을 가집니다.




//: [Next](@next)

//: [Previous](@previous)

import Foundation

//Basic Operators (기초 연산자)
//연산자 (operator) 는 값을 검사하거나, 바꾸며, 또는 조합하기 위해 사용하는 특수한 ‘기호 ’ 나 ‘구절’ 입니다. 예를 들어, ‘더하기 연산자 (+)’ 는, let i = 1 + 2 에서 처럼, 두 수를 더하고, ‘논리 곱 (logical AND) 연산자 (&&)’ 는, if enterDoorCode && passedRetinaScan 에서 처럼, 두 ‘불리언 (Boolean)’ 값을 조합합니다.
//일반적인 코딩 에러를 없애기 위해 보유 능력 몇 가지를 개선했습니다. ‘할당 (assignment) 연산자 (=)’ 는, ‘같음 (equal to) 연산자 (==)’ 를 의도한 곳에서 실수로 사용되는 것을 막기 위해, 값을 반환하지 않습니다.
//‘산술 (arithmetic) 연산자 (+,-, *, /, % 등등)’ 은, 이를 저장하는 타입의 허용 범위보다 크거나 작은 값과 작업할 때의 예기치 않은 결과를 피하기 위해, ‘값 넘침 (value overflow)’ 을 감지하고 이를 불허합니다.
//‘값 넘침’ 동작은, Overflow Operator (값 넘침 연산자) 에서 설명한 것처럼, 스위프트의 ‘값 넘침 (overflow) 연산자’ 를 사용함으로써 직접 선택할 수 있습니다.

//스위프트는 C 에는 없는 ‘범위 (range) 연산자’ 도 제공하는데, 값의 범위를 표현하는 ‘줄임말 (shortcut)’ 로써, a..<b 와 a...b 등이 있습니다.



//Terminology (용어)
//연산자는 ‘단항 (unary)’, ‘이항 (binary)’, 또는 ‘삼항 (ternary)’ 입니다.

//단항 (Unary) 연산자는 (-a 처럼) 단일 대상에 작용합니다. ‘단항 접두사 (prefix) 연산자’ 는 (!b 처럼) 대상 바로 앞에 위치하며 , ‘단항 접미사 (suffix) 연산자’ 는 (c! 처럼) 대상 바로 뒤에 위치합니다.
//이항 (Binary) 연산자는 (2 + 3 처럼) 두 개의 대상에 작용하며, 두 대상 사이에 위치하기 때문에 infix (중위))1 라고도 합니다.
//삼항 (Ternary) 연산자는 세 개의 대상에 작용합니다. C 와 같이, 스위프트도, ‘삼항 조건 연산자 (a ? b : c)’ 라는, 단 한 개의 삼항 연산자만을 가지고 있습니다.



//: [Next](@next)

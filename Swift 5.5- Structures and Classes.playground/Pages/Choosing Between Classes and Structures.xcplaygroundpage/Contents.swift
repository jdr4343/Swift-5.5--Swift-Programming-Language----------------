//: [Previous](@previous)

import Foundation

//Choosing Between Classes and Structures(구조와 클래스 중에서 선택하기)
///https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes
//구조체와 클래스는 유사하기 때문에 선택하기 어려울수 있습니다.
//앱에 새 데이터 유형을 추가할 때 적합한 옵션을 선택하는 데 도움이 되도록 다음 권장 사항을 고려하십시오.

//기본적으로 구조체를 사용합니다.
//Objective-C 상호 운용성이 필요할 때 클래스를 사용하십시오.
//모델링하는 데이터의 식별자를 제어해야 하는 경우 클래스를 사용합니다.
//프로토콜과 함께 구조를 사용하여 구현을 공유하여 동작을 채택합니다.

//기본적으로 구조체 선택(Choose Structures by Default)

//일반적인 유형의 데이터를 나타내려면 구조체를 사용합니다. Swift의 구조에는 다른 언어의 클래스로 제한된 많은 기능이 포함되어 있습니다. 여기에는 저장된 속성, 계산된 속성 및 메서드가 포함될 수 있습니다. 더욱이, Swift 구조는 기본 구현을 통해 동작을 얻기 위한 프로토콜을 채택할 수 있습니다. Swift 표준 라이브러리 및 Foundation은 숫자, 문자열, 배열 및 사전과 같이 자주 사용하는 유형에 구조를 사용합니다.

//구조체를 사용하면 앱의 전체 상태를 고려할 필요 없이 코드의 일부에 대해 더 쉽게 추론할 수 있습니다. 구조는 클래스와 달리 값 유형이기 때문에, 구조의 로컬 변경 사항은 앱 흐름의 일부로 의도적으로 전달하지 않는 한 앱의 나머지 부분에 표시되지 않습니다. 따라서 코드의 한 섹션을 보고 접선 관련 함수 호출에서 보이지 않는 대신 해당 섹션의 인스턴스에 대한 변경이 명시적으로 이루어질 것이라는 확신을 가질 수 있습니다.



//Objective-C 상호 운용성이 필요할 때 클래스 사용(Use classes when you need Objective-C interoperability.)
//데이터를 처리해야 하는 Objective-C API를 사용하거나 데이터 모델을 Objective-C 프레임워크에 정의된 기존 클래스 계층에 맞춰야 하는 경우 클래스 및 클래스 상속을 사용하여 데이터를 모델링해야 할 수 있습니다. 예를 들어, 많은 Objective-C 프레임워크는 하위 클래스로 예상되는 클래스를 노출합니다.

//식별자를 제어해야 할때 클래스 사용(Use classes when you need to control the identity of the data you're modeling.)

//Swift의 클래스는 참조 유형이기 때문에 기본 제공 식별자 개념이 있습니다. 이는 두 개의 서로 다른 클래스 인스턴스가 각각의 저장된 속성에 대해 동일한 값을 가질 때 식별 연산자( ===)에 의해 여전히 서로 다른 것으로 간주된다는 것을 의미합니다 . 또한 앱 전체에서 클래스 인스턴스를 공유할 때 해당 인스턴스에 대한 변경 사항이 해당 인스턴스에 대한 참조를 보유하는 코드의 모든 부분에서 볼 수 있음을 의미합니다. 인스턴스에 이러한 종류의 식별자가 필요한 경우 클래스를 사용하십시오. 일반적인 사용 사례는 파일 핸들, 네트워크 연결 및 .CBCentralManager

//예를 들어 로컬 데이터베이스 연결을 나타내는 유형이 있는 경우 해당 데이터베이스에 대한 액세스를 관리하는 코드는 앱에서 볼 때 데이터베이스 상태를 완전히 제어해야 합니다. 이 경우 클래스를 사용하는 것이 적절하지만 공유 데이터베이스 개체에 액세스할 수 있는 앱 부분을 제한해야 합니다.


//Use structures along with protocols to adopt behavior by sharing implementations.
//상속을 모델링하고 행동을 공유하기 위해 구조 및 프로토콜 사용
//구조와 클래스는 모두 상속 형식을 지원합니다. 구조와 프로토콜은 프로토콜만 채택할 수 있습니다. 클래스에서 상속할 수 없습니다. 그러나 클래스 상속으로 구축할 수 있는 상속 계층의 종류는 프로토콜 상속 및 구조를 사용하여 모델링할 수도 있습니다.

//상속 관계를 처음부터 구축하는 경우 프로토콜 상속을 선호합니다. 프로토콜을 사용하면 클래스, 구조 및 열거형이 상속에 참여할 수 있지만 클래스 상속은 다른 클래스와만 호환됩니다. 데이터를 모델링하는 방법을 선택할 때 먼저 프로토콜 상속을 사용하여 데이터 유형의 계층을 구축한 다음 구조에서 해당 프로토콜을 채택하십시오.




//: [Next](@next)
